#include<iostream>
//#include<conio.h>
#include<string.h>
#include<ctype.h>

#define MAX 5
using namespace std;
struct node
{
    char data;
    struct node *next;
};
class Stack
{
    public:
	node *top;
	Stack();         //constructor
	char Top();     //return top element without popping
	int null();     //check if Stack is empty
	void push(char x);     //push function
	char pop();         //pop function
	int precedence(char x);   //check precedence of operators

	//void infix_to_postfix(char infix[],char postfix[]);
};

Stack::Stack()
{
    top=NULL;
}

char Stack::Top()
{
    return(top->data);
}

int Stack::null()
{
    if(top==NULL)
    return(1);
    return(0);
}

void Stack::push(char x)
{
    node *p;
	p=new node;
	p->data=x;
	p->next=top;
	top=p;
}

char Stack::pop()
{
    node *p;
    char x;
    p=top;
    top=top->next;
    x=p->data;
    delete(p);
    return(x);
}

int Stack::precedence(char x)
{
    if(x=='(')
    return 0;
    else if(x=='+'||x=='-')
    return 1;
    else if(x=='*'||x=='/'||x=='%')
    return 2;
    return 3;
}

void infix_to_postfix(char infix[],char postfix[])
{
    Stack s;
    char x,token;
    int i,j=0;
    for(i=0;infix[i]!='\0';i++)
    {
	token=infix[i];
	if(isalnum(token))
	{
	    postfix[j++]=token;
	    if(isalnum(infix[i+1]))
	    {;}
	    else
		postfix[j++]=',';
	}
	else
	    if(token=='(')
		s.push(token);
	    else
		if(token==')')
		{
		    while((x=s.pop())!='(')
			postfix[j++]=x;
		}
		else
		{
		    while(s.precedence(token)<=s.precedence(s.Top())&& !s.null())
			postfix[j++]=s.pop();
		    s.push(token);
		}
    }
    while(!s.null())
    {
	x=s.pop();
	postfix[j++]=x;
    }
    postfix[j++]='\0';
}
int main()
{
   // clrscr();
    cout<<"********************************************************************************";
    cout<<"\t\t\t\tSTACK INFIX TO POSTFIX\n";
    cout<<"********************************************************************************";
    cout<<"\n\n";
    char infix[30],postfix[30];
    cout<<"\nEnter the infix expression:\n";
    cin>>infix;
    infix_to_postfix(infix,postfix);
    cout<<"\nThe equivalent postfix expression is:\n"<<postfix;
   // getch();
    return 0;
}

